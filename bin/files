#!/usr/bin/env bash

#
# the key parameters are
#   num_words:   number of generated files
#   num_folders: number of generated folders
#   in_folder:   number of files in folders
#

# exit on error
set -e

# source of all words: a wordlist
# export FILES_WORDLIST=~/.my_own_private_wordlist
WORDFILE=/usr/share/dict/words
FILES_WORDLIST=${FILES_WORDLIST:-$WORDFILE}


#
# get array of N words from a wordlist $FILES_WORDLIST
#
function get_words {
  local words=()
  local list_length=$(cat $FILES_WORDLIST | wc -l)
  local MAX_RANDOM=32767   # http://wiki.bash-hackers.org/syntax/shellvars#random

  for (( i=0; i<$1; i++ ))
  do
    local list_index=$(( $RANDOM * $list_length / $MAX_RANDOM + 1 ))
    local word=$(sed -n $(($list_index))p $FILES_WORDLIST | tr A-Z a-z)
    words[$i]=$word
  done
  echo "${words[@]}"
}


#
# create directory sequence and store in variable: folder > folder1 > folder2 > ...
#
mkdir_seq() {
  if [ -d $1 ] || [ -f $1 ]; then
    mkdir_seq $(seq $1)
  else
    mkdir $1
    folders=(${folders[@]} $1)
  fi
}


#
# return file sequence: file > file1 > file2 > ...
#
file_seq() {
  [[ -f $1 || -d $1 ]] && file_seq $(seq $1) || echo "$1"
}


#
# make word sequence: word > word1 > word2 > ...
#
seq() {
  echo "$(echo $1 | tr -d 0-9)$(($(echo $1 | tr -d a-z)+1))"
}


# Set $min to first script argument. defaults to 10
min=${1:-10}

# Set $max to second script argument. defaults to 20
max=${2:-20}

# Number of words: a random number between min and max
# num_words=$(($RANDOM % $(($max - $min)) + $min))
num_words=15
# number of folders.
# value is ceiled.
# num_folders=$(($RANDOM % $(($num_words / 5)) + 1))
num_folders=2


# create folders and store folder names in array for later usage
folders=()
for word in $(get_words $num_folders)
do
  mkdir_seq $word
done

# put 50% of files in folders
folder_percent=50
# in_folder=$(( $num_words * $folder_percent / 100 ))
in_folder=10


# generate folders and files
folder_counter=0
for word in $(get_words $num_words)
do
  _word=$(file_seq $word)

  # create files in folders first ...
  if [ $folder_counter -lt $in_folder ] && [ $num_folders -gt 0 ]; then

    # distribute files equally in the folders
    folder=$(( $folder_counter % $num_folders ))
    folder_counter=$(($folder_counter + 1))
    echo $_word > ${folders[$folder]}/$_word

  # ... then files in current directory
  else
    echo $_word > $_word
  fi
done

# vim:ft=sh
