#!/usr/bin/env bash

# exit on error
set -e

VERSION="0.1"

# Location of the session file.
# This file contains all file names which were generated in the current working directory
FILES_SESSION="$PWD/.files"

# terminal colors
RED=$'\033[1;31m'
GREEN=$'\033[0;32m'
BLUE=$'\033[1;34m'
GREY=$'\033[1;30m'
RESET=$'\033[0m'


#
# print usage info
#
usage() {
  cat <<EOF
  random files generator
  version $VERSION

  Usage: ${0##*/} [options] [number-of-files/folders ...] [word ...]

  Options:

    -f, --wordfile   Location of a wordfile
    -c, --content    Add content to generated files
    -r, --remov      Remove content from generated files
    -l, --list       List generated files
    -d, --delete     Delete generated files (including session file)
    -s, --session    Start new files-session (delete session file)
    -v, --version    Output version
    -h, --help       This message

  Examples:

    $ files                              # generate a random number of files and folders
    $ files 10                           # generate 10 files and no folders
    $ files 10 2                         # generate 10 files and 2 folders
    $ files 10 2 6                       # generate 10 files of which 6 files are in 2 folders
    $ files foo bar baz                  # generate files & folders using the words "foo", "bar" and "baz"
    $ files 10 foo bar baz               # generate 10 files using the words "foo", "bar" and "baz"
    $ files -f mywords.txt               # generate files & folders using words from mywords.txt
    $ cat mywords.txt | xargs files      # generate files & folders using words from mywords.txt
    $ files -c                           # append content to all generated files
    $ files -3c                          # append 3 lines of content to all generated files
    $ files -r                           # remove content from all generated files
    $ files -3r                          # remove 3 lines of content from all generated files
    $ files -d                           # delete all generated files

EOF
}


#
# status message
#
message() {
  if [ "$number_of_folders" -eq 0 ]; then
    echo -e "\n$GREY generated $GREEN$(unit $number_of_files file)$GREY in current directory.$RESET"
  else
    echo -e "\n$GREY generated $GREEN$(unit $(( $number_of_files - $files_in_folder )) file)$GREY in current directory and $GREEN$(unit $files_in_folder file)$GREY in $GREEN$(unit $number_of_folders folder)$GREY.$RESET"
  fi
}
unit() {
  local plural="s"
  [ "$1" -eq 1 ] && plural=""
  echo "$1 $2$plural"
}


#
# create a wordlist file from a word-array
#
mkwordlist() {
  WORDLIST=$(mktempfile)
  local words=$@
  for word in $words; do echo $word >> $WORDLIST; done
}


#
# get array of N words from a wordlist $WORDLIST
#
words() {
  local num=$1
  local _words=()
  local list_length=$(wc -l < $WORDLIST)
  local MAX_RANDOM=32767   # http://wiki.bash-hackers.org/syntax/shellvars#random

  for (( i=0; i<num; i++ ))
  do
    local list_index=$(( $RANDOM * $list_length / $MAX_RANDOM + 1 ))
    local word=$(sanitize "$(sed -n $(($list_index))p $WORDLIST)")
    _words[$i]=$word
  done
  echo "${_words[@]}"
}


#
# create word sequence: word -> word1 -> word2 -> ...
#
word_seq() {
  if [[ -f $1 || -d $1 ]]; then
    word_seq $(seq $1)
  else
    echo $1
  fi
}


#
# sanitize words:
#   uppercase to lowercase
#   replace whitespaces and underscores with a dash
#   remove single quotes
#   remove numbers
#   remove dots
#
sanitize() {
  echo $(echo $1 | tr A-Z a-z | tr -s ' _' '-' | tr -d "'" | tr -d 0-9 | tr -d .)
}


#
# create next word: word<n> -> word<n+1>
#
seq() {
  echo $(echo $1 | tr -d 0-9)$(( $(echo $1 | tr -d /a-z-) + 1 ))
}


#
# get tempfile which stores a temporary wordlist
#
mktempfile() {
  echo $(mktemp -t ${1:-`basename $0`}XXXX)
}


#
# get session file which stores generated files
#
session() {
  [ ! -e $FILES_SESSION ] && touch $FILES_SESSION
  echo $FILES_SESSION
}


#
# verify a session file exist
#
verify_session() {
  if [ ! -f $FILES_SESSION ]; then
    echo -e "\n$RED no random files available.$RESET" 1>&2
    exit 1
  fi
}


# source of all words: a wordlist
#
# define own wordlist with:
#    export WORDLIST=~/.my_wordlist
#
WORDLIST=${WORDLIST:-/usr/share/dict/words}

# if wordlist does not exist, use letters a-z as words
[ ! -f $WORDLIST ] && mkwordlist `echo {a..z}`

# check if provided wordlist is empty
[ ! -s "$WORDLIST" ] && echo "${0##*/}: wordlist is empty" 1>&2 && exit 1


# parse command arguments
#
items=()
words=()
while test $# -ne 0; do
  arg=$1
  shift
  case $arg in
    -f|--wordfile)
      [ -z $1 ] && echo "provide a file" && echo 1
      [ ! -e $1 ] && echo "file doesn't exist" && echo 1
      WORDLIST=$1
      shift
      ;;
    -c|--content)
      verify_session
      for f in `cat $FILES_SESSION`
      do
        [ -f $f ] && echo $(seq `tail -n 1 $f`) >> $f
      done
      exit 1
      ;;
    -*c)
      verify_session
      n=$(echo $arg | tr -cd '[[:digit:]]')
      for f in `cat $FILES_SESSION`
      do
        [ -f $f ] && for (( i=0; i<n; i++ )); do echo $(seq `tail -n 1 $f`) >> $f; done
      done
      exit 1
      ;;
    -r|--remove)
      verify_session
      for f in `cat $FILES_SESSION`
      do
        [ -f $f ] && sed -i '' '$d' $f
      done
      exit 1
      ;;
    -*r)
      verify_session
      n=$(echo $arg | tr -cd '[[:digit:]]')
      for f in `cat $FILES_SESSION`
      do
        [ -f $f ] && l=`wc -l < $f`; sed -i '' "$(( $l - $n + 1 )),\$d" $f
      done
      exit 1
      ;;
    -d|--delete)
      verify_session
      tail -r $FILES_SESSION | xargs rm -r   # delete files first, then folders. As folders were written first, we delete entries in reverse order
      rm $FILES_SESSION
      exit 1
      ;;
    -s|--session)
      [ -f $FILES_SESSION ] && rm $FILES_SESSION
      exit 1
      ;;
    -l|--list)
      verify_session
      for f in `cat $FILES_SESSION | sort`
      do
        [ -d $f ] && echo "$BLUE${f}/$RESET" || { echo $f | sed "s/^\(.*\)\//$BLUE\1\/$RESET/"; }
      done
      exit 1
      ;;
    -v|--version)
      echo $VERSION
      exit 1
      ;;
    -h|--help)
      usage
      exit 1
      ;;
    *)
      if [[ $arg =~ ^[0-9]+$ ]]; then
        items=(${items[@]} $arg)
      else
        words=(${words[@]} $arg)
      fi
      ;;
  esac
done


# create a wordlist from words given by arguments
[ ! -z $words ] && mkwordlist ${words[@]}

# number of generated files (defaults to a random number between 10 and 20 if not given)
number_of_files=${items[0]:-$(( $RANDOM % 20 + 10 ))}

# if only numer_of_files is given, set number_of_folders and files_in_folder to zero
[ ${#items[@]} == 1 ] && { items[1]=0; items[2]=0; }

# number of generated folders (defaults to a random number between 1 and 3 if number is not given)
number_of_folders=${items[1]:-$(( $RANDOM % 3 + 1 ))}

# number of files within a folder (defaults to half of files)
files_in_folder=${items[2]:-$(( $number_of_files / 2 ))}


#
# create folders and store folder names in array for later usage
#
if [ $number_of_folders -gt 0 ]; then
  folders=()
  for word in $(words $number_of_folders)
  do
    folder=$(word_seq $word)
    mkdir $folder
    echo $folder >> $(session)
    folders=(${folders[@]} $folder)
  done
fi


#
# generate folders and files
#
i=0 # loop-index
for word in $(words $number_of_files)
do

  # create files in folders first ...
  if [ $i -lt $files_in_folder ] && [ $number_of_folders -gt 0 ]; then
    _word=$(word_seq ${folders[$(( $i % $number_of_folders ))]}/$word)
    echo $_word | sed 's/.*\///g' > $_word
    echo $_word >> $(session)

  # ... and then files in current directory
  else
    _word=$(word_seq $word)
    echo $_word > $_word
    echo $_word >> $(session)
  fi

  i=$(( $i + 1 ))
done

message
exit 0


# vim:ft=sh
