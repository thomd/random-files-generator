#!/usr/bin/env bash

# exit on error
set -e

# source of all words: a wordlist
# export FILES_WORDLIST=~/.my_own_private_wordlist
WORDFILE=/usr/share/dict/words
FILES_WORDLIST=${FILES_WORDLIST:-$WORDFILE}

#
# get array of N words from a wordlist $FILES_WORDLIST
#
function get_words {
  local words=()
  local list_length=$(cat $FILES_WORDLIST | wc -l)
  local MAX_RANDOM=32767   # http://wiki.bash-hackers.org/syntax/shellvars#random

  for (( i=0; i<$1; i++ ))
  do
    local list_index=$(( $RANDOM * $list_length / $MAX_RANDOM ))
    local word=$(sed -n $(($list_index))p $FILES_WORDLIST | tr A-Z a-z)
    words[$i]=$word
  done

  echo "${words[@]}"
}

# Set $min to first script argument. defaults to 10
min=${1:-10}

# Set $max to second script argument. defaults to 20
max=${2:-20}

# Number of words: a random number between min and max
num_words=$(($RANDOM % $(($max - $min)) + $min))

# number of folders.
# value is ceiled.
num_folders=$(($RANDOM % $(($num_words / 5)) + 1))

folders=()

# create folders and store folder names in array for later usage
for word in $(get_words $num_folders)
do
  [ ! -d $word ] && mkdir -p $word
  folders=(${folders[@]} $word)
done

# put 50% of files in folders
folder_percent=50

in_folder=$(( $num_words * $folder_percent / 100 ))
folder_counter=0

# Loop for generating files
for word in $(get_words $num_words)
do
  folder_counter=$(($folder_counter + 1))

  if [ $folder_counter -lt $in_folder ]; then
    folder=$(( $RANDOM % $num_folders ))
    echo $word > ${folders[$folder]}/$word
  else
    echo $word > $word
  fi
done

# vim:ft=sh
